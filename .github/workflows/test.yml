name: test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
  workflow_run:
    workflows: [ "release" ]
    types: [ completed ]

jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - name: Waiting for images to be ready
        timeout-minutes: 60
        run: |
          COMMIT_ID=${GITHUB_SHA}
          ProjectId=${{ secrets.coding_project_id }}
          Token=${{ secrets.coding_token }}
          while true; do
            url='https://codingcorp-generic.pkg.coding.net/nocalhost/nhctl/nhctl-linux-amd64?version='$COMMIT_ID''
            echo "url: ""$url"
            a=$(curl -s "$url") || true
            echo "response: ""$a"
            if [[ $a =~ "File not found" ]]; then
              sleep 5
            else
              break
            fi
          done
          function wait() {
            Action=$1
            Repository=$2
            Package=$3
            PackageVersion=$4
            while true; do
              res=$(curl -X POST -s 'https://codingcorp.coding.net/open-api' \
                --header 'Authorization: token '$Token'' \
                --header 'Content-Type: text/plain' \
                --data-raw '{
                "Action": "'"$Action"'",
                "ProjectId": '$ProjectId',
                "Repository": "'"$Repository"'",
                "Package": "'"$Package"'",
                "PackageVersion": "'"$PackageVersion"'"
              }') || true
              echo "wait for package: ""$Package"" version: ""$PackageVersion"
              echo "response: ""$res"
              if [[ $res =~ "InstanceSet" ]]; then
                break
              else
                sleep 5
              fi
            done
          }
          echo 'wait for testcase'
          wait "DescribeArtifactProperties" "public" "testcase" $COMMIT_ID
          echo 'wait for nocalhost-api'
          wait "DescribeArtifactProperties" "public" "nocalhost-api" $COMMIT_ID
          echo 'wait for nocalhost-dep'
          wait "DescribeArtifactProperties" "public" "nocalhost-dep" $COMMIT_ID
  linux:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [ "image" ]
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - name: git tag
        timeout-minutes: 60
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(git tag | tail -2)
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
          echo ${{ env.RELEASE_VERSION }}
      - uses: engineerd/setup-kind@v0.5.0
        timeout-minutes: 10
      - name: Kubernetes info
        timeout-minutes: 5
        run: |
          kubectl cluster-info
          kubectl get pods -n kube-system
          cat ~/.kube/config
          ls -lah ~/.kube/config
          cd ~/.kube/
          pwd
      - name: Testing
        timeout-minutes: 60
        run: |
          SHA=${GITHUB_SHA}
          kubectl create namespace test || true
          IMAGE=codingcorp-docker.pkg.coding.net/nocalhost/public/testcase:$SHA
          docker run -d -v /home/runner/.kube/config:/root/.kube/config -e COMMIT_ID=$SHA -e TAG=${{ env.RELEASE_VERSION }} --network host --name $SHA $IMAGE
          docker logs $SHA -f || true
          ID=$(docker inspect "$(docker ps -aq --filter name=$SHA)" --format='{{.State.ExitCode}}') && echo "$ID" | grep '^0$'
  macos:
    runs-on: macos-latest
    timeout-minutes: 180
    needs: [ "image" ]
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - name: git tag
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        timeout-minutes: 10
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(echo $(git tag | tail -2))
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v1
      - name: Testing
        timeout-minutes: 180
        shell: bash
        run: |
          SHA=${GITHUB_SHA}
          configmapname="$SHA""mac"

          echo ${{ env.RELEASE_VERSION }}
          echo ${{ secrets.kube_config }} | base64 -d >> config
          kubectl create namespace test --kubeconfig=config || true
          kubectl create namespace lock --kubeconfig=config || true
          kubectl create configmap $configmapname -n lock --kubeconfig=config || true
          while true; do
            lock=$(kubectl get configmap -n lock --sort-by=.metadata.creationTimestamp --no-headers --kubeconfig=config | head -1 | awk -F ' ' '{print$1}') || true
            echo "current lock: ""$lock"
            if [ -z "$lock" ]; then
              break
            fi
            if [ "$lock" = $configmapname ]; then
              echo "got lock"
              break
            fi
            sleep 5
          done
          path="$(pwd)""/config"
          echo $path
          export KUBECONFIG_PATH=$path
          ls -lah
          pwd
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=$SHA
          cd test
          go build
          ./test
      - name: clean
        if: always()
        run: |
          SHA=${GITHUB_SHA}
          configmapname="$SHA""mac"
          echo ${{ secrets.kube_config }} | base64 -d > config
          kubectl delete configmap $configmapname -n lock --kubeconfig=config || true
  windows:
    runs-on: windows-latest
    needs: ["image"]
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@master
        timeout-minutes: 10
      - name: git tag
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        timeout-minutes: 10
        run: |
          git fetch --prune --unshallow --tags
          TAG=$(echo $(git tag | tail -2))
          echo $TAG
          echo "RELEASE_VERSION=${TAG}" >> $GITHUB_ENV
        shell: bash
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v1
      - name: testing
        timeout-minutes: 180
        shell: bash
        run: |
          curl https://eternallybored.org/misc/wget/1.21.1/64/wget.exe -o wget.exe
          ./wget https://get.helm.sh/helm-v3.5.4-windows-amd64.zip
          unzip helm-v3.5.4-windows-amd64.zip
          dir
          cp windows-amd64/helm ./helm
          dir
          pwd
          ADD_PATH="$(pwd)"
          PATH="${ADD_PATH}:${PATH}"
          export PATH

          SHA=${GITHUB_SHA}
          configmapname="$SHA""win"
          echo ${{ env.RELEASE_VERSION }}
          echo ${{ secrets.kube_config }} | base64 -d >> config
          kubectl create namespace test --kubeconfig=config || true
          kubectl create namespace lock --kubeconfig=config || true
          kubectl create configmap $configmapname -n lock --kubeconfig=config || true
          while true; do
            lock=$(kubectl get configmap -n lock --sort-by=.metadata.creationTimestamp --no-headers --kubeconfig=config | head -1 | awk -F ' ' '{print$1}') || true
            echo "current lock: ""$lock"
            if [ -z "$lock" ]; then
              break
            fi
            if [ "$lock" = $configmapname ]; then
              echo "got lock"
              break
            fi
            sleep 5
          done
          path="$(pwd)""/config"
          echo $path
          export KUBECONFIG_PATH=$path
          ls -lah
          pwd
          export TAG="${{ env.RELEASE_VERSION }}"
          export COMMIT_ID=$SHA
          cd test
          go build
          ./test
      - name: clean
        if: always()
        shell: bash
        run: |
          SHA=${GITHUB_SHA}
          configmapname="$SHA""win"
          echo ${{ secrets.kube_config }} | base64 -d > config
          kubectl delete configmap $configmapname -n lock --kubeconfig=config || true
